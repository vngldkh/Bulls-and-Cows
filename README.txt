Название проекта: Bulls_and_Cows

Описание: 
Программа реализует игру "Быки и коровы".
Подробное описание игры - https://ru.wikipedia.org/wiki/Быки_и_коровы (RU), https://en.wikipedia.org/wiki/Bulls_and_Cows (EN).

Принцип работы:
	1. Инициализируется переменная bool adminMode = false.
	   Она отвечает за текущий режим игры. По умолчанию - "игрок".
	   Подробнее в описании метода SwitchMode(ref bool adminMode) (№5).
	2. Оператор do-while реализует повторное решение.
	3. Внутри цикла do-while:
		1. Очищается консоль.
		2. Вызывается метод Menu(ref adminMode), который отвечает за дальнейшие действия программы.
		   Подробнее в описании метода Menu(ref bool adminMode) (№1).
	4. Программа прекращает работу, когда после работы метода Menu(ref bool adminMode) пользователь нажимает ESC.

Реализованные методы: 
1. Menu(ref bool adminMode)
	Входные данные:
		1. ref bool adminMode - переменная, сообщающая о текущем режиме игры.
		   Модификатор ref используется для повторного решения.
	Возвращаемые данные:
		-
	Описание:
		Реализует "пользовательский интерфейс" (меню игры).
		Меню имеет 5 опций:
			1. Начать игру. 
			2. Прочитать правила.
			3. Выбрать режим игры.
			4. Список чит-кодов.
			5. Выйти из игры.
	Принцип работы:
		1. Вывод список доступных опций.
		2. Считывается нажатая пользователем клавиша.
		3. Очищается консоль.
		4. Оператор switch-case выполняет соответствующую функцию:
			1. Вызывает метод InitGame(adminMode).
			2. Выводит статическую строку класса rules.
			3. Вызывает метод SwitchMode(ref adminMode).
			4. Выводит статическую строку класса cheats.
			5. Выходит из метода Menu(ref adminMode).
		   Опретор default предусматривает вариант, когда пользователь нажимает неверную клавишу. 
		   В этом случае выводится соответсвующее сообщение, и завершается работа метода Menu(ref adminMode).

2. InitGame(bool adminMode)
	Входные данные:
		1. ref bool adminMode - переменная, сообщающая о текущем режиме игры.
	Возвращаемые данные:
		-
	Описание:
		Инициализирует процесс игры.
	Принцип работы:
		1. Инициализируются необходимые переменные 
			a) int len - переменная, в которую будет записана длина загадываемого числа.
			b) string input - переменная для записи входных данных.
			c) bool flag - переменная для отслеживания корректности входных данных.
		2. В цикле do-while пользователь вводит длину загадываемого числа len, пока входные данные не будут корректными.
		   Для отслеживания корректности ввода используется переменная flag типа bool.
		3. С помощью метода Random(len) случайно генерируется число long rightNum длины len с различными цифрами.
		4. Если выбран режим игры "администратор" выводится загаданное число.
		5. Вызывается метод Game(rightNum, len).

3. Game(long rightNum, int len)
	Входные данные:
		1. long righNumber - загаданное число.
		2. int len - длина загаданного числа.
	Возвращаемые данные:
		-
	Описание:
		Непосредственно реализует процесс игры.
	Принцип работы:
		1. Инициализируются необходимые переменные:
			a) long userNumber - переменная для записи числа, введённого пользователем.
			b) bool flag - переменная для проверки корректности ввода.
			c) bool endOfGame - переменная, сообщающая окончена ли игра.
			d) string input - переменная для записи входных данных.
			e) int countTurns - переменная для счёта кол-ва потребовавшихся ходов.
		2. Преобразуем число rightNumber в список его цифр rightNumberDigits с помощью метода NumToList(rightNumber).
		3. В один цикл do-while (1) вложен другой - (2).
		   Во внутреннем цикле (2) игрок вводит число или чит-код.
		   Оператор switch-case проверяет, является ли введённая строка чит-кодом. 
		   Если нет, то проверяет корректность ввода. 
		   Корректность проверяется с помощью переменной flag типа bool, 
		   которой присваивается значение метода IsInputCorrect(input, len, out userNumber).
		   Во внешнем цикле (1) введённое число проверяется с помощью метода Check(rightNumberDigits, userNumber, out endOfGame).
		   Также кол-во ходов увеличивается на один. Введение чит-кодов или ошибочный ввод не считаются ходом.
		   Внешний цикл (1) повторяется, пока игра неокончена. Это проверяется с помощью переменной endOfGame типа bool.
		4. Если endOfGame == true, цикл завершается и выводится соответсующее сообщение.

4. IsInputCorrect(string input, int len, out long userNumber)
	Входные данные:
		1. string input - введённая пользователем строка.
		2. int len - длина загаданного числа.
		3. out long userNumber - переменная для записи, введённого пользователем числа.
	Возвращаемые данные:
		Метод возвращает сообщение о корректности ввода в типе bool.
	Описание:
		Метод проверяет, является ли ввод корректным.
	Принцип работы:
		1. С помощью метода long.TryParse(input, out userNumber) пытается преобразовать введённую строку в число.
		   Если введённая строка не число, выводит соответсвующее сообщение и возвращает false.
		2. Если введённая строка - число, проверяет его длину. 
		   Если длина введённого числа не совпадает с длиной загаданного, выводится соответсвующее сообщение и возвращает false.
		3. Если введённая строка - число верной длины, возвращается true.

5. SwitchMode(ref bool adminMode)
	Входные данные:
		1. ref bool adminMode - переменная, отображающая текущий режим игры.
	Возвращаемые данные:
		-
	Описание:
		Метод позволяет сменить режим игры.
		Предлагается два режима:
			1. "Администратор" - загаданное число выводится в начале игры.
			2. "Игрок" - загаданное число не отображается.
	Принцип работы:
		1. Выводятся доступные опции.
		2. Оператор switch-case реализует выбранную опцию:
			1. adminMode присваивается значение true.
			2. adminMode присваивается значение false.
		   Оператор default предусматривает вариант, когда пользователь нажимает неверную клавишу.
		   В этом случае очищается консоль, выводится соответствующее сообщение и завершается работа метода.
		3. Если была нажата верная клавиша, выводится соответствующее сообщение.

6. RandomNum(int len)
	Входные данные:
		1. int len - длина загадываемого числа.
	Возвращаемые данные:
		Метод возвращает случайно сгенерированное число длины len с различными цифрами.
	Описание:
		Метод случайно генерирует число длины len с различными цифрами и возвращает его.
	Принцип работы:
		1. Инициализируются необходимые объекты и перменные:
			a) List<int> digits = new List<int>() {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; - список со всеми цифрами.
			b) Random rnd - объект для генерации случайных чисел.
			c) int pos - вспомогательная переменная, значения которой и будет генерировать rnd.
			   В неё будет записываться случайная позиция в списке с доступными цифрами.
			d) long num - переменная для записи получившегося числа.
		2. В цикле for с переменной итерации i:
			1. Случайно генерируется число от 0 до длины digits. 
			   (Если i = 0 и len > 1, то от 1, т.к. число не может начинаться с 0.)
			   Оно записывается в pos.
			2. num умножается на 10, и к нему добавляется цифра, стоящая в списке digits на месте pos.
			3. Из списка digits удаляется цифра на месте pos. 
		    Цикл повторяется len раз.
		3. Возвращается num.

7. Check(Lest<int> rightNumberDigits, long userNumber, out bool endOfGame)
	Входные данные:
		1. List<int> rightNumberDigits - список цифр верного числа (в обратном порядке).
		2. long userNumber - число введённое пользователем.
		3. out bool endOfGame - переменная для отслеживания конца игры.
	Возвращаемые данные:
		Метод возвращает строку, содержащую информацию о кол-ве коров и быков в числе.
	Описание:
		Метод сверяет введённое пользователем число с верным.
	Принцип работы:
		1. Пользовательское число преобразуется в список его цифр с помощью метода NumToList(userNumber).
		2. Инициализируются необходимые переменные:
			a) int bulls - счётчик быков.
			b) int cows - счётчик коров.
		3. Цикл for с переменной итерации i пробегает все цифры пользовательского числа и с каждым из них делает следующее:
			1. Проверяет на наличие в списке цифр верного числа с помощью метода rightNumberDigits.Contains(userNumberDigits[i]).
			2. Если оно там есть, сверяются проверяемая цифра пользовательского числа и цифра верного на той же позиции.
			3. Если обе проверки прошли успешно, увеличивается кол-во быков, если только (1) - кол-во коров.
		4. В виде строки возвращается сообщение о кол-ве коров и быков в числе.

8. NumToList(long num)
	Входные данные:
		1. long num - число, которое надо разбить на цифры.
	Возвращаемые данные:
		Метод возвращает цифры числа num в обратном порядке в виде списка.
	Описание:
		Метод разбивает число на цифры.
	Принцип работы:
		1. Инициализируется пустой список List<int> digits.
		2. while (num > 0) пробегает все цифры числа.
		   Каждое из них он добавляется в конец списка (digits.Add((int) num % 10)).
		   Затем num нацело делится на 10. 
		3. Возвращается список digits.

				